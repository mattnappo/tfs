/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: tfs.proto */

#ifndef PROTOBUF_C_tfs_2eproto__INCLUDED
#define PROTOBUF_C_tfs_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _File File;
typedef struct _Memory Memory;
typedef struct _FiletableFile FiletableFile;
typedef struct _FiletableBucket FiletableBucket;
typedef struct _Filetable Filetable;
typedef struct _Filesystem Filesystem;


/* --- enums --- */


/* --- messages --- */

struct  _File
{
  ProtobufCMessage base;
  char *name;
  ProtobufCBinaryData bytes_;
  uint32_t s;
};
#define FILE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&file__descriptor) \
    , (char *)protobuf_c_empty_string, {0,NULL}, 0 }


struct  _Memory
{
  ProtobufCMessage base;
  ProtobufCBinaryData bytes_;
  uint32_t s;
};
#define MEMORY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&memory__descriptor) \
    , {0,NULL}, 0 }


struct  _FiletableFile
{
  ProtobufCMessage base;
  char *name;
  uint32_t s;
  uint32_t offset;
};
#define FILETABLE_FILE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&filetable_file__descriptor) \
    , (char *)protobuf_c_empty_string, 0, 0 }


struct  _FiletableBucket
{
  ProtobufCMessage base;
  size_t n_files;
  FiletableFile **files;
  uint32_t n_entries;
};
#define FILETABLE_BUCKET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&filetable_bucket__descriptor) \
    , 0,NULL, 0 }


struct  _Filetable
{
  ProtobufCMessage base;
  size_t n_buckets;
  FiletableBucket **buckets;
  uint32_t n_files;
};
#define FILETABLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&filetable__descriptor) \
    , 0,NULL, 0 }


struct  _Filesystem
{
  ProtobufCMessage base;
  Memory *mem;
  Filetable *ft;
};
#define FILESYSTEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&filesystem__descriptor) \
    , NULL, NULL }


/* File methods */
void   file__init
                     (File         *message);
size_t file__get_packed_size
                     (const File   *message);
size_t file__pack
                     (const File   *message,
                      uint8_t             *out);
size_t file__pack_to_buffer
                     (const File   *message,
                      ProtobufCBuffer     *buffer);
File *
       file__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   file__free_unpacked
                     (File *message,
                      ProtobufCAllocator *allocator);
/* Memory methods */
void   memory__init
                     (Memory         *message);
size_t memory__get_packed_size
                     (const Memory   *message);
size_t memory__pack
                     (const Memory   *message,
                      uint8_t             *out);
size_t memory__pack_to_buffer
                     (const Memory   *message,
                      ProtobufCBuffer     *buffer);
Memory *
       memory__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   memory__free_unpacked
                     (Memory *message,
                      ProtobufCAllocator *allocator);
/* FiletableFile methods */
void   filetable_file__init
                     (FiletableFile         *message);
size_t filetable_file__get_packed_size
                     (const FiletableFile   *message);
size_t filetable_file__pack
                     (const FiletableFile   *message,
                      uint8_t             *out);
size_t filetable_file__pack_to_buffer
                     (const FiletableFile   *message,
                      ProtobufCBuffer     *buffer);
FiletableFile *
       filetable_file__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   filetable_file__free_unpacked
                     (FiletableFile *message,
                      ProtobufCAllocator *allocator);
/* FiletableBucket methods */
void   filetable_bucket__init
                     (FiletableBucket         *message);
size_t filetable_bucket__get_packed_size
                     (const FiletableBucket   *message);
size_t filetable_bucket__pack
                     (const FiletableBucket   *message,
                      uint8_t             *out);
size_t filetable_bucket__pack_to_buffer
                     (const FiletableBucket   *message,
                      ProtobufCBuffer     *buffer);
FiletableBucket *
       filetable_bucket__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   filetable_bucket__free_unpacked
                     (FiletableBucket *message,
                      ProtobufCAllocator *allocator);
/* Filetable methods */
void   filetable__init
                     (Filetable         *message);
size_t filetable__get_packed_size
                     (const Filetable   *message);
size_t filetable__pack
                     (const Filetable   *message,
                      uint8_t             *out);
size_t filetable__pack_to_buffer
                     (const Filetable   *message,
                      ProtobufCBuffer     *buffer);
Filetable *
       filetable__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   filetable__free_unpacked
                     (Filetable *message,
                      ProtobufCAllocator *allocator);
/* Filesystem methods */
void   filesystem__init
                     (Filesystem         *message);
size_t filesystem__get_packed_size
                     (const Filesystem   *message);
size_t filesystem__pack
                     (const Filesystem   *message,
                      uint8_t             *out);
size_t filesystem__pack_to_buffer
                     (const Filesystem   *message,
                      ProtobufCBuffer     *buffer);
Filesystem *
       filesystem__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   filesystem__free_unpacked
                     (Filesystem *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*File_Closure)
                 (const File *message,
                  void *closure_data);
typedef void (*Memory_Closure)
                 (const Memory *message,
                  void *closure_data);
typedef void (*FiletableFile_Closure)
                 (const FiletableFile *message,
                  void *closure_data);
typedef void (*FiletableBucket_Closure)
                 (const FiletableBucket *message,
                  void *closure_data);
typedef void (*Filetable_Closure)
                 (const Filetable *message,
                  void *closure_data);
typedef void (*Filesystem_Closure)
                 (const Filesystem *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor file__descriptor;
extern const ProtobufCMessageDescriptor memory__descriptor;
extern const ProtobufCMessageDescriptor filetable_file__descriptor;
extern const ProtobufCMessageDescriptor filetable_bucket__descriptor;
extern const ProtobufCMessageDescriptor filetable__descriptor;
extern const ProtobufCMessageDescriptor filesystem__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_tfs_2eproto__INCLUDED */
