 #define FSID_LEN HASH_LEN
+#define PROTO_PADDING 128
+#define MAX_FILE_LEN (50000-PROTO_PADDING) // 50 KB 
 
diff --git a/src/memory.c b/src/memory.c
index 875eda8..198f9c7 100644
--- a/src/memory.c
+++ b/src/memory.c
@@ -14,10 +14,11 @@ void destroy_memory(struct memory *mem)
     free(mem);
 }
 
-int mem_dump(struct memory *mem, enum print_mode m)
+int mem_dump(struct memory *mem, enum print_mode m, int endpoint)
 {
+    if (endpoint >= mem->s) return 1;
     printf("\n=== BEGIN DUMP ===\n");
-    for (int i = 0; i < mem->s; i++) {
+    for (int i = 0; i < endpoint; i++) {
         if (mem->bytes[i] == 0)
             printf("%s", (m == HEX) ? "00 " : " ");
         else if (m == HEX)
diff --git a/src/memory.h b/src/memory.h
index 0fdbbda..594f246 100644
--- a/src/memory.h
+++ b/src/memory.h
@@ -6,7 +6,7 @@
 #ifndef MEMORY_H
 #define MEMORY_H
 
-#define MEM_SIZE 2048
+#define MEM_SIZE 5000000 // 5 MB
 
 enum print_mode {
     HEX,
@@ -21,7 +21,7 @@ struct memory {
 struct memory *new_memory();
 void destroy_memory(struct memory *mem);
 
-int      mem_dump  (struct memory *mem, enum print_mode m);
+int      mem_dump  (struct memory *mem, enum print_mode m, int endpoint);
 int      mem_write (struct memory *mem, uint8_t *b, size_t s, size_t offset);
 uint8_t *mem_read  (struct memory *mem, size_t s, size_t offset);
 
diff --git a/src/net/client.c b/src/net/client.c
index d7c8e06..03ad37d 100644
--- a/src/net/client.c
+++ b/src/net/client.c
@@ -47,7 +47,7 @@ struct fs *client_get_fs(SOCKET server)
     // First, make the request to get an fs
     uint8_t tfsid[FSID_LEN];
     memset(tfsid, 0x00, FSID_LEN);
-    struct tfs_req req = { .type = TFS_GET_FS };
+    struct tfs_req req = { .type = REQ_GET_FS };
     memcpy(req.fsid, tfsid, FSID_LEN);
     uint8_t *packed;
     pack_req(&packed, req);
diff --git a/src/net/net.h b/src/net/net.h
index 4ce356b..359c971 100644
--- a/src/net/net.h
+++ b/src/net/net.h
@@ -22,7 +22,8 @@
 #define GETSOCKETERRNO() (errno)
 
 // #define LISTEN_PORT "8080"
-#define RES_LEN 100000
+#define RES_LEN 1
+#define RES_BODY_LEN 
 
 // In bytes, not bits
 #define REQ_TYPE_O 0
@@ -37,24 +38,35 @@
 // };
 
 enum req_type {
-    TFS_GET_FS,
-    TFS_GET_FILE,
-    TFS_PUT_FILE,
-    TFS_NEW_FS,
-    TFS_GET_ALL_FSIDS,
-    TFS_MAX = 255
+    REQ_GET_FS,          /* get a filesystem by fsid */
+    REQ_GET_FILE,        /* get a singular file from fs given fsid */
+    REQ_PUT_FILE,        /* put a file into fs given fsid */
+    REQ_NEW_FS,          /* make a new fs */
+    REQ_GET_ALL_FSIDS,   /* get all fsids in the fsdb */
+    REQ_MAX = 255
 };
 
 struct tfs_req {
     // struct tfs_header header;
     enum req_type type;
     uint8_t fsid[FSID_LEN];
+    uint8_t filename;
+};
+
+enum res_type {
+    RES_ERROR,     /* an error,  data=error message */
+    RES_FILE,      /* a success, data=a file */
+    RES_FS,        /* a success, data=a filesystem */
+    RES_FSIDS,     /* a success, data=a list of fsids */
+    RES_SUCCESS,   /* a general success, data=a general message */
+    RES_MESG,      /* data=a general message */
+    RES_MAX = 255
 };
 
-// Could be an error
 struct tfs_res {
     // struct tfs_header header;
-
+    enum res_type type;
+    uint8_t data[RES_BODY_LEN];
 };
 
 /* protocol */
diff --git a/src/net/server.c b/src/net/server.c
index bff78b1..c19309a 100644
--- a/src/net/server.c
+++ b/src/net/server.c
@@ -96,7 +96,7 @@ static int handle_req(SOCKET client, struct tfs_req r)
     switch (r.type) {
     // TODO: Really, this will send a res (once I implemented ress)
     // instead of just the raw fs bytes
-    case TFS_GET_FS: {
+    case REQ_GET_FS: {
         struct lbuffer temp_fs = get_temp_fs();
         uint8_t *tfs_buf = temp_fs.buf;
         size_t tfs_len = temp_fs.len;
@@ -105,16 +105,16 @@ static int handle_req(SOCKET client, struct tfs_req r)
         free(tfs_buf);
         break;
     }
-    case TFS_GET_FILE:
+    case REQ_GET_FILE:
         break;
 
-    case TFS_PUT_FILE:
+    case REQ_PUT_FILE:
         break;
 
-    case TFS_NEW_FS:
+    case REQ_NEW_FS:
         break;
 
-    case TFS_GET_ALL_FSIDS:
+    case REQ_GET_ALL_FSIDS:
         break;
 
     default:
diff --git a/src/serialize.c b/src/serialize.c
index bf747f1..9005970 100644
--- a/src/serialize.c
+++ b/src/serialize.c
@@ -237,9 +237,13 @@ unsigned serialize_fs(uint8_t **buf, struct fs *fs)
 
     // Pack
     unsigned len = filesystem__get_packed_size(&sfs);
-    *buf = malloc(len);
-    filesystem__pack(&sfs, *buf);
-    printf("writing %d serialized bytes\n", len);
+    if (len < MAX_PACKED_FS_LEN) {
+        *buf = malloc(len);
+        filesystem__pack(&sfs, *buf);
+        printf("writing %d serialized bytes\n", len);
+    } else {
+        len = 0;
+    }
 
     // Free memory and ftable
     free(smem.bytes_.data);
diff --git a/src/serialize.h b/src/serialize.h
index c1e5dbf..e7c146d 100644
--- a/src/serialize.h
+++ b/src/serialize.h
@@ -7,8 +7,9 @@
 #include "proto/build/tfs.pb-c.h"
 #include "fs.h"
 
-#define MAX_MEM_SIZE MEM_SIZE+32
-#define MAX_IO_SIZE 100000
+#define MAX_PACKED_FILE_LEN (MAX_FILE_LEN+PROTO_PADDING)
+#define MAX_PACKED_FS_LEN   (MEM_SIZE+4096+(PROTO_PADDING*2))
+#define MAX_IO_SIZE         MAX_PACKED_FS_LEN
 
 /* serialize the given pointer into buf */
 unsigned serialize_memory        (uint8_t **buf, struct memory *mem);
diff --git a/tests/test_main.c b/tests/test_main.c
index ff37483..d2b185b 100644
--- a/tests/test_main.c
+++ b/tests/test_main.c
@@ -4,9 +4,11 @@ void test_fs()
 {
 	struct fs *tfs = new_fs(); // Make the fs
 	struct file tfile = new_file("testfile.txt"); // Make a new file
+	struct file broken_tfile = new_file("testfile.txt'"); // Make a new file
 
 	fs_add_file(tfs, tfile, 60); // Add the file to the fs
-	mem_dump(tfs->mem, HEX);
+	fs_add_file(tfs, broken_tfile, 0);
+	mem_dump(tfs->mem, HEX, 2000);
 	
 	// Test mem reading
 	uint8_t *some_read = mem_read(tfs->mem, 6, 62);
@@ -50,7 +52,7 @@ void test_fs_simple()
     fs_add_file(tfs, tfile3, 200);
     fs_add_file(tfs, tfile3, 600);
 
-    mem_dump(tfs->mem, HEX);
+    mem_dump(tfs->mem, HEX, 2000);
 
     get_fs_(tfs, "filename");
     get_fs_(tfs, "testfile.txt");
@@ -104,6 +106,21 @@ void test_ft()
 
 }
 
+void test_invalid_filename()
+{
+    const char *fname = "m";
+	struct fs *tfs = new_fs(); // Make the fs
+	struct file broken = new_file(fname); // Make a new file
+
+	fs_add_file(tfs, broken, 0);
+    struct file fetched = fs_get_file(tfs, fname);
+    print_file(fetched, ASCII);
+    destroy_file(broken);
+    destroy_file(fetched);
+
+    destroy_fs(tfs);
+}
+
 int test_mem()
 {
 	return 0;
@@ -111,10 +128,11 @@ int test_mem()
 
 int main()
 {
-    test_fs();
-    test_fs_simple();
-    test_mem();
-    test_ft();
+    //test_fs();
+    //test_fs_simple();
+    //test_mem();
+    //test_ft();
+    test_invalid_filename();
 
     return 0;
 }
diff --git a/tests/test_protocol.c b/tests/test_protocol.c
index 1a265b3..c9c5fda 100644
--- a/tests/test_protocol.c
+++ b/tests/test_protocol.c
@@ -10,7 +10,7 @@ int test_req()
         printf("%x ", tfsid[c]);
     printf("\n");
 
-    struct tfs_req req = { .type = TFS_PUT_FILE };
+    struct tfs_req req = { .type = REQ_PUT_FILE };
     memcpy(req.fsid, tfsid, FSID_LEN);
 
     printf("tfsid inside: ");
diff --git a/tests/test_serialize.c b/tests/test_serialize.c
index 6ca1a2f..42c2f32 100644
--- a/tests/test_serialize.c
+++ b/tests/test_serialize.c
@@ -27,7 +27,7 @@ void test_memory()
     // Deserialize into a new mem*
     struct memory *d_mem = deserialize_memory(serialized_buf, len);
 
-    mem_dump(d_mem, HEX);
+    mem_dump(d_mem, HEX, 2000);
     destroy_memory(mem);
     destroy_memory(d_mem);
 }
@@ -136,7 +136,7 @@ void test_fs()
     fs_add_file(tfs, tfile3, 200);
     fs_add_file(tfs, tfile3, 600);
 
-    mem_dump(tfs->mem, HEX);
+    mem_dump(tfs->mem, HEX, 2000);
     print_ftable(*tfs->ft);
 
     get(tfs->ft, "filename");
@@ -150,7 +150,7 @@ void test_fs()
 
     // Deserialize
     struct fs *deserialized = deserialize_fs(buffer, slen);
-    mem_dump(deserialized->mem, HEX);
+    mem_dump(deserialized->mem, HEX, 2000);
     print_ftable(*deserialized->ft);
 
     get(deserialized->ft, "filename");
diff --git a/vgcore.64358 b/vgcore.64358
deleted file mode 100644
index e78eb2e..0000000
Binary files a/vgcore.64358 and /dev/null differ
diff --git a/vgcore.82091 b/vgcore.82091
deleted file mode 100644
index 6ee70fa..0000000
Binary files a/vgcore.82091 and /dev/null differ
